@page "{searchBy?}/{searchArg?}/{playlistname?}"
@model WebApp.Pages.SamplePages.PlaylistManagementModel
@{
    ViewData["Title"] = "Playlist Management";
}


<h1>Playlist Management</h1>
<blockquote>
    This page has  been created to demonstrate an UI interface for bulk maintenance
    of data on the database, commonly referred to as <b>transactional processing</b>.
    The page will allow the user to create or alter a list of tracks (Add, reorgnaize,
    and remove) of a playlist.
    <br/><br/>
    Several UI techniques will be employeed on this page. This is not the only way
    the interface could have been done. Special note should be directed to the 
    display and collection of data from the Playlist table. This table will demonstrate
    an implementation of using CQRS data models. The error list display demonstrates the
    display of having multiple errors returned from a business service.

</blockquote>

@if (Model.HasFeedBack)
{
    <blockquote class="alert alert-success">@Model.FeedBackMessage</blockquote>
}

@if (Model.HasError)
{
    <div class="alert alert-danger">
        @Model.ErrorMessage
        <ul>
            @foreach (var detail in Model.ErrorDetails)
            {
                <li>@detail</li>
            }
        </ul>
    </div>
}
<section class="row">
    <div class="col-lg-6">
        <form method="post">
            <label>
                Search pattern
            </label>
            <input class="form-control" type="text" asp-for="searchArg" />
            <div class="mt-2">

                <input type="radio" asp-for="searchBy" value="Artist" />&nbsp;&nbsp;Artist
                &nbsp;&nbsp;
                <input type="radio" asp-for="searchBy" value="Album" />&nbsp;&nbsp;Album
                <button class="btn btn-primary" type="submit" asp-page-handler="TrackSearch"
                        title="Fetch tracks">
                    <i class="fa-solid fa-magnifying-glass"></i> Tracks
                </button>
            </div>


        </form>
        @if(!string.IsNullOrWhiteSpace(Model.searchArg)
             && !string.IsNullOrWhiteSpace(Model.searchBy))
        {
          if(Model.trackInfo.Count() == 0)
            {
                <p style="color:blue;font-weight:bold; font-size:large">
                    No tracks matching search request.
                </p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Song</th>
                            <th>Album</th>
                            <th>Artist</th>
                            <th>Length</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.trackInfo)
                        {
                            <tr>
                                <td>
                                    @* code to demo a button on a table
        using a icon
                                    *@
                                    <form method="post">
                                        <input type="hidden" value="@item.TrackId" asp-for="addtrackid" />
                                        <button type="submit" title="Add this track" class="btn btn-success" asp-page-handler="AddTrack"><i class="fa-solid fa-plus"></i></button>
                                    </form>
                                </td>
                                <td>@item.SongName</td>
                                <td>@item.AlbumTitle</td>
                                <td>@item.ArtistName</td>
                                <td>@TimeSpan.FromMilliseconds(item.Milliseconds).ToString(@"mm\:ss")</td>
                                <td>@item.Price</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="6">
                                @{
                                    foreach (var pageRef in Model.Pager)
                                    {
                                        // I can use the == because of PageRef type being a C# 9 record type
                                        if (pageRef == Model.Pager.CurrentPage)
                                        {
                                            <b>@pageRef.Text</b>
                                        }
                                        else
                                        {
                                            <a title="Page @pageRef.Page" asp-page="/SamplePages/PlaylistManagement"
                                            asp-route-currentpage="@pageRef.Page">@pageRef.Text</a>
                                        }
                                    }
                                }
                            </td>
                        </tr>
                    </tfoot>
                </table>
            }
        }
    </div>
    <div class="col-lg-6">
       <form method="post" id="playlist">

            <label>
                Enter playlist name:
            </label>
                <input class="form-control" type="text" asp-for="playlistname" />
            <button class="btn btn-primary mt-2" type="submit" title="Retreive Playlist"
                    asp-page-handler="Fetch">
                Fetch List
            </button>&nbsp;&nbsp;
            @if(Model.qplaylistInfo != null &&
                Model.qplaylistInfo.Count > 0)
                {
                    <button class="btn btn-danger mt-2" type="submit" title="Remove tracks"
                            asp-page-handler="Remove"
                            >
                        Remove Tracks
                    </button>
                }
                &nbsp;&nbsp;
             @if(Model.qplaylistInfo != null &&
                Model.qplaylistInfo.Count > 0)
                {
                    <button class="btn btn-primary mt-2" type="submit" title="Reorganize playlist"
                            asp-page-handler="ReOrg">
                        Re-Org Tracks
                    </button>
                }
            <br /><br />
            @if (Model.qplaylistInfo != null)
            {
                if (Model.qplaylistInfo.Count == 0)
                {
                    <p style="color:blue; font-weight:bold;">This playlist is empty or does not exist. Adding a track will create the playlist.</p>

                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Trk #</th>
                                <th>Song</th>
                                <th>length</th>
                                <th>Reorg Trk#</th>
                            </tr>
                        </thead>

                        <tbody>
                            @* code to demo CQRS for a table display

                            a) create an incoming control(hidden) that will act as an "unique index identifier"
                            for each instance that will be created.

                            <input type="hidden" name="commandmodelproperty name.Index"
                            value="@instanceitem.uniqueidentifiyingproperty" />

                            <input type="hidden" name="cplaylistinfo.Index"
                            value="@item.TrackId" />

                            b) for the display of the table on each property of the row instance, use the value of your unique
                                index  identifier as an "{[Index]}" attach to the name of the field.

                            <input type="text"
                                name="cplaylistinfo[@item.TrackId].propertyname"
                                value="@trackinput">

                                ALL incoming data that belongs to the same"[index]" will be collected
                                into the SAME instance row and placed into your command model List<T>

                                NOTE: using this technique of name/value pair REPLACES the asp-for parameter

                            *@

                            @foreach(var item in Model.qplaylistInfo)
                            {

                                    @*
                                        retain entered values non-query model fields (from the command collection)
                                        to assit with error messages
                                        setup local variables to hold the command data values
                                        move any existing command collection data into the appropriate values
                                        NOTE: WARNING. you MUST have an instance of your command collection (List<>)
                                        to solve this, add a=new() to declareation of your command collection.
                                        This will ensure a command data collection instance exsists even if empty
*@
                                bool selectedtrack = false;
                                string? trackinput = null;
                                var song = Model.cplaylistInfo.SingleOrDefault(x => x.TrackId == item.TrackId);
                                if(song !=null)
                                {
                                    selectedtrack = song.SelectedTrack;
                                    trackinput = song.TrackInput.ToString();
                                }
                                <tr>
                                    <td>
                                        <input type="hidden" name="cplaylistinfo.Index"
                                               value="@item.TrackId" />
                                        <input type="hidden" name="cplaylistinfo[@item.TrackId].TrackId"
                                               value="@item.TrackId" />
                                        <input type="checkbox" name="cplaylistinfo[@item.TrackId].SelectedTrack" checked="@selectedtrack"
                                               value="true" />
                                    </td>
                                    <td>
                                        <input type="hidden" name="cplaylistinfo[@item.TrackId].TrackNumber"
                                               value="@item.TrackNumber" />
                                        @item.TrackNumber
                                    </td>
                                    <td>
                                        @item.SongName
                                    </td>
                                    <td>
                                        @TimeSpan.FromMilliseconds(item.Milliseconds).ToString(@"mm\:ss");
                                    </td>
                                    <td>
                                        <input type="text" name="cplaylistinfo[@item.TrackId].TrackInput" value="@trackinput" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            }
        </form>
    </div>
</section>